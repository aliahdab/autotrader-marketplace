{
  "info": {
    "_postman_id": "4eff2be1-a742-4d38-92ca-d18e7f795c0c",
    "name": "AutoTrader API Tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate random values for user registration",
                  "const randomUsername = 'user_' + Math.random().toString(36).substring(2, 10);",
                  "const randomEmail = `${randomUsername}@example.com`;",
                  "",
                  "// Store values for use across requests",
                  "pm.environment.set('test_username', randomUsername);",
                  "pm.environment.set('test_email', randomEmail);",
                  "pm.environment.set('test_password', 'password123');",
                  "",
                  "console.log(`Generated test user: ${randomUsername}, ${randomEmail}`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Registration successful message\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"successfully\");",
                  "});",
                  "",
                  "// Log the response for debugging",
                  "console.log(\"Registration Response:\", pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{test_username}}\",\n    \"email\": \"{{test_email}}\",\n    \"password\": \"{{test_password}}\",\n    \"role\": [\"user\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessToken).to.exist;",
                  "    pm.expect(jsonData.tokenType).to.equal(\"Bearer\");",
                  "    ",
                  "    // Store token for later use",
                  "    pm.environment.set(\"auth_token\", jsonData.accessToken);",
                  "});",
                  "",
                  "console.log(\"Login Response:\", pm.response.json());",
                  "console.log(\"Auth Token:\", pm.environment.get(\"auth_token\").substring(0, 15) + \"...\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{test_username}}\",\n    \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signin",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signin"]
            }
          }
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has access token for admin\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessToken).to.exist;",
                  "    pm.expect(jsonData.tokenType).to.equal(\"Bearer\");",
                  "    ",
                  "    // Store admin token for later use",
                  "    pm.environment.set(\"admin_auth_token\", jsonData.accessToken);",
                  "});",
                  "",
                  "console.log(\"Admin Login Response:\", pm.response.json());",
                  "console.log(\"Admin Auth Token:\", pm.environment.get(\"admin_auth_token\").substring(0, 15) + \"...\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signin",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signin"]
            }
          }
        }
      ]
    },
    {
      "name": "Reference Data Tests",
      "item": [
        {
          "name": "Get All Reference Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains all reference data categories\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('carConditions');",
                  "    pm.expect(jsonData).to.have.property('driveTypes');",
                  "    pm.expect(jsonData).to.have.property('bodyStyles');",
                  "    pm.expect(jsonData).to.have.property('fuelTypes');",
                  "    pm.expect(jsonData).to.have.property('transmissions');",
                  "    pm.expect(jsonData).to.have.property('sellerTypes');",
                  "});",
                  "",
                  "pm.test(\"Each category contains data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.carConditions).to.be.an('array').and.not.to.be.empty;",
                  "    pm.expect(jsonData.driveTypes).to.be.an('array').and.not.to.be.empty;",
                  "    pm.expect(jsonData.bodyStyles).to.be.an('array').and.not.to.be.empty;",
                  "    pm.expect(jsonData.fuelTypes).to.be.an('array').and.not.to.be.empty;",
                  "    pm.expect(jsonData.transmissions).to.be.an('array').and.not.to.be.empty;",
                  "    pm.expect(jsonData.sellerTypes).to.be.an('array').and.not.to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/reference-data",
              "host": ["{{baseUrl}}"],
              "path": ["api", "reference-data"]
            }
          }
        }
      ]
    },
    {
      "name": "Car Conditions Tests",
      "item": [
        {
          "name": "Get All Car Conditions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of car conditions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/car-conditions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "car-conditions"]
            }
          }
        },
        {
          "name": "Search Car Conditions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/car-conditions/search?q=new",
              "host": ["{{baseUrl}}"],
              "path": ["api", "car-conditions", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "new"
                }
              ]
            }
          }
        },
        {
          "name": "Create Car Condition (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created car condition\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-condition');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Condition');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('حالة مخصصة');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"condition_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-condition\",\n    \"displayNameEn\": \"Custom Condition\",\n    \"displayNameAr\": \"حالة مخصصة\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/car-conditions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "car-conditions"]
            }
          }
        },
        {
          "name": "Update Car Condition (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated car condition\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"condition_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Condition');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-condition\",\n    \"displayNameEn\": \"Updated Condition\",\n    \"displayNameAr\": \"حالة مخصصة محدثة\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/car-conditions/{{condition_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "car-conditions", "{{condition_id}}"]
            }
          }
        },
        {
          "name": "Delete Car Condition (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/car-conditions/{{condition_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "car-conditions", "{{condition_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Drive Types Tests",
      "item": [
        {
          "name": "Get All Drive Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of drive types\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/drive-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types"]
            }
          }
        },
        {
          "name": "Get Drive Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains drive type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/drive-types/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types", "1"]
            }
          }
        },
        {
          "name": "Get Drive Type by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains drive type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/drive-types/name/awd",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types", "name", "awd"]
            }
          }
        },
        {
          "name": "Search Drive Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/drive-types/search?q=wheel",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "wheel"
                }
              ]
            }
          }
        },
        {
          "name": "Create Drive Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created drive type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-drive-type');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Drive Type');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('نظام دفع مخصص');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"drive_type_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-drive-type\",\n    \"displayNameEn\": \"Custom Drive Type\",\n    \"displayNameAr\": \"نظام دفع مخصص\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/drive-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types"]
            }
          }
        },
        {
          "name": "Update Drive Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated drive type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"drive_type_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Drive Type');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-drive-type\",\n    \"displayNameEn\": \"Updated Drive Type\",\n    \"displayNameAr\": \"نظام دفع محدث\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/drive-types/{{drive_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types", "{{drive_type_id}}"]
            }
          }
        },
        {
          "name": "Delete Drive Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/drive-types/{{drive_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "drive-types", "{{drive_type_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Body Styles Tests",
      "item": [
        {
          "name": "Get All Body Styles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of body styles\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/body-styles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles"]
            }
          }
        },
        {
          "name": "Get Body Style by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains body style details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/body-styles/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles", "1"]
            }
          }
        },
        {
          "name": "Get Body Style by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains body style details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/body-styles/name/sedan",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles", "name", "sedan"]
            }
          }
        },
        {
          "name": "Search Body Styles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/body-styles/search?q=sedan",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "sedan"
                }
              ]
            }
          }
        },
        {
          "name": "Create Body Style (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created body style\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-body-style');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Body Style');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('نوع هيكل مخصص');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"body_style_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-body-style\",\n    \"displayNameEn\": \"Custom Body Style\",\n    \"displayNameAr\": \"نوع هيكل مخصص\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/body-styles",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles"]
            }
          }
        },
        {
          "name": "Update Body Style (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated body style\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"body_style_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Body Style');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-body-style\",\n    \"displayNameEn\": \"Updated Body Style\",\n    \"displayNameAr\": \"نوع هيكل محدث\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/body-styles/{{body_style_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles", "{{body_style_id}}"]
            }
          }
        },
        {
          "name": "Delete Body Style (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/body-styles/{{body_style_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "body-styles", "{{body_style_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Fuel Types Tests",
      "item": [
        {
          "name": "Get All Fuel Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of fuel types\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types"]
            }
          }
        },
        {
          "name": "Get Fuel Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains fuel type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types", "1"]
            }
          }
        },
        {
          "name": "Get Fuel Type by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains fuel type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types/name/petrol",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types", "name", "petrol"]
            }
          }
        },
        {
          "name": "Search Fuel Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types/search?q=gas",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "gas"
                }
              ]
            }
          }
        },
        {
          "name": "Create Fuel Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created fuel type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-fuel-type');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Fuel Type');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('نوع وقود مخصص');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"fuel_type_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-fuel-type\",\n    \"displayNameEn\": \"Custom Fuel Type\",\n    \"displayNameAr\": \"نوع وقود مخصص\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types"]
            }
          }
        },
        {
          "name": "Update Fuel Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated fuel type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"fuel_type_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Fuel Type');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-fuel-type\",\n    \"displayNameEn\": \"Updated Fuel Type\",\n    \"displayNameAr\": \"نوع وقود محدث\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types/{{fuel_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types", "{{fuel_type_id}}"]
            }
          }
        },
        {
          "name": "Delete Fuel Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/fuel-types/{{fuel_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "fuel-types", "{{fuel_type_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Transmissions Tests",
      "item": [
        {
          "name": "Get All Transmissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of transmissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/transmissions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions"]
            }
          }
        },
        {
          "name": "Get Transmission by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains transmission details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/transmissions/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions", "1"]
            }
          }
        },
        {
          "name": "Get Transmission by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains transmission details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/transmissions/name/automatic",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions", "name", "automatic"]
            }
          }
        },
        {
          "name": "Search Transmissions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/transmissions/search?q=auto",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "auto"
                }
              ]
            }
          }
        },
        {
          "name": "Create Transmission (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created transmission\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-transmission');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Transmission');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('ناقل حركة مخصص');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"transmission_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-transmission\",\n    \"displayNameEn\": \"Custom Transmission\",\n    \"displayNameAr\": \"ناقل حركة مخصص\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/transmissions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions"]
            }
          }
        },
        {
          "name": "Update Transmission (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated transmission\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"transmission_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Transmission');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-transmission\",\n    \"displayNameEn\": \"Updated Transmission\",\n    \"displayNameAr\": \"ناقل حركة محدث\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/transmissions/{{transmission_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions", "{{transmission_id}}"]
            }
          }
        },
        {
          "name": "Delete Transmission (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/transmissions/{{transmission_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "transmissions", "{{transmission_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Seller Types Tests",
      "item": [
        {
          "name": "Get All Seller Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array of seller types\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seller-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types"]
            }
          }
        },
        {
          "name": "Get Seller Type by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains seller type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seller-types/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types", "1"]
            }
          }
        },
        {
          "name": "Get Seller Type by Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains seller type details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('displayNameEn');",
                  "    pm.expect(jsonData).to.have.property('displayNameAr');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seller-types/name/dealer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types", "name", "dealer"]
            }
          }
        },
        {
          "name": "Search Seller Types",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search results are valid\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameEn');",
                  "        pm.expect(jsonData[0]).to.have.property('displayNameAr');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seller-types/search?q=dealer",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "dealer"
                }
              ]
            }
          }
        },
        {
          "name": "Create Seller Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains created seller type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.equal('custom-seller-type');",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Custom Seller Type');",
                  "    pm.expect(jsonData.displayNameAr).to.equal('نوع بائع مخصص');",
                  "    ",
                  "    // Store ID for update and delete operations",
                  "    pm.environment.set(\"seller_type_id\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-seller-type\",\n    \"displayNameEn\": \"Custom Seller Type\",\n    \"displayNameAr\": \"نوع بائع مخصص\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/seller-types",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types"]
            }
          }
        },
        {
          "name": "Update Seller Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated seller type\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id').to.equal(Number(pm.environment.get(\"seller_type_id\")));",
                  "    pm.expect(jsonData.displayNameEn).to.equal('Updated Seller Type');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"custom-seller-type\",\n    \"displayNameEn\": \"Updated Seller Type\",\n    \"displayNameAr\": \"نوع بائع محدث\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/seller-types/{{seller_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types", "{{seller_type_id}}"]
            }
          }
        },
        {
          "name": "Delete Seller Type (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{admin_auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/seller-types/{{seller_type_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "seller-types", "{{seller_type_id}}"]
            }
          }
        }
      ]
    }
  ]
}
